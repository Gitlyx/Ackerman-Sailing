function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import Tween, { Easing } from 'tweenkle';

function createTween(_ref, onProgress, onComplete) {
  var prop = _ref.prop,
      value = _ref.value,
      target = _ref.target,
      tweenProps = _ref.tweenProps;

  if (onProgress === void 0) {
    onProgress = function onProgress(prop, state) {};
  }

  if (onComplete === void 0) {
    onComplete = function onComplete(prop, state) {};
  }

  var vars = Object.assign({}, {
    duration: 1000,
    ease: Easing.Quad.Out
  }, tweenProps);
  var tween = new Tween(_objectSpread({}, vars, {
    start: value,
    end: target
  }));
  tween.on('tick', function (state) {
    onProgress(prop, state);
  });
  tween.on('complete', function (state) {
    onComplete(prop, state);
  });
  tween.start();
  return tween;
}

export default createTween;